[gd_scene load_steps=73 format=2]

[ext_resource path="res://Assets/Textures/Cave Assets/tunneltilset.png" type="Texture" id=1]
[ext_resource path="res://Assets/Textures/Cave Assets/box.tres" type="Texture" id=2]
[ext_resource path="res://Scenes/Characters/Player.tscn" type="PackedScene" id=3]
[ext_resource path="res://Tilemap/Forest/Grass.tscn" type="PackedScene" id=4]
[ext_resource path="res://Tilemap/Bailes De Luces/BailesTilemap.tscn" type="PackedScene" id=5]
[ext_resource path="res://Assets/Textures/Cave Assets/pressureplate.tres" type="Texture" id=7]
[ext_resource path="res://Scenes/Maps/PressurePlate.gd" type="Script" id=8]
[ext_resource path="res://Scenes/Objects/CaveDoor.tscn" type="PackedScene" id=9]
[ext_resource path="res://Scenes/Objects/Door.tscn" type="PackedScene" id=10]
[ext_resource path="res://Scenes/UI/InteractKey.tscn" type="PackedScene" id=11]
[ext_resource path="res://Scenes/Maps/MovableBox.gd" type="Script" id=12]
[ext_resource path="res://Assets/Textures/MUSEUM ASSETTSS/0x72_DungeonTilesetII_v1.3.png" type="Texture" id=13]
[ext_resource path="res://Scenes/Cutscene.tscn" type="PackedScene" id=14]
[ext_resource path="res://Assets/Textures/Tunnel/doorportal-Sheet-export.png" type="Texture" id=15]
[ext_resource path="res://Dialogue/Dialogue.tscn" type="PackedScene" id=16]
[ext_resource path="res://Assets/Textures/MUSEUM ASSETTSS/door museum1.png" type="Texture" id=17]
[ext_resource path="res://icon.png" type="Texture" id=18]

[sub_resource type="ConvexPolygonShape2D" id=4]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=5]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=6]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=7]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=8]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=9]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=10]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=11]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=12]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=13]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=14]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=15]
points = PoolVector2Array( 0, 16, 16, 16, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=16]
points = PoolVector2Array( 0, 16, 0, 16, 0, 0, 16, 0, 16, 16, 16, 16 )

[sub_resource type="ConvexPolygonShape2D" id=17]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16, 0, 0, 0, 0 )

[sub_resource type="ConvexPolygonShape2D" id=18]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=19]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=20]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=21]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=22]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=23]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=24]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=25]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=26]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=27]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=28]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="ConvexPolygonShape2D" id=29]
points = PoolVector2Array( 0, 0, 16, 0, 16, 16, 0, 16 )

[sub_resource type="TileSet" id=1]
0/name = "tunneltilset.png 0"
0/texture = ExtResource( 1 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 176, 80 )
0/tile_mode = 1
0/autotile/bitmask_mode = 1
0/autotile/bitmask_flags = [ Vector2( 0, 0 ), 432, Vector2( 0, 1 ), 438, Vector2( 0, 2 ), 54, Vector2( 0, 3 ), 48, Vector2( 1, 0 ), 504, Vector2( 1, 1 ), 511, Vector2( 1, 2 ), 63, Vector2( 1, 3 ), 56, Vector2( 2, 0 ), 216, Vector2( 2, 1 ), 219, Vector2( 2, 2 ), 27, Vector2( 2, 3 ), 56, Vector2( 3, 0 ), 144, Vector2( 3, 1 ), 146, Vector2( 3, 2 ), 18, Vector2( 3, 3 ), 16, Vector2( 4, 0 ), 176, Vector2( 4, 1 ), 182, Vector2( 4, 2 ), 434, Vector2( 4, 3 ), 50, Vector2( 4, 4 ), 178, Vector2( 5, 0 ), 248, Vector2( 5, 1 ), 255, Vector2( 5, 2 ), 507, Vector2( 5, 3 ), 59, Vector2( 5, 4 ), 251, Vector2( 6, 0 ), 440, Vector2( 6, 1 ), 447, Vector2( 6, 2 ), 510, Vector2( 6, 3 ), 62, Vector2( 6, 4 ), 446, Vector2( 7, 0 ), 152, Vector2( 7, 1 ), 155, Vector2( 7, 2 ), 218, Vector2( 7, 3 ), 26, Vector2( 7, 4 ), 154, Vector2( 8, 0 ), 184, Vector2( 8, 1 ), 191, Vector2( 8, 2 ), 510, Vector2( 8, 3 ), 58, Vector2( 8, 4 ), 186, Vector2( 9, 0 ), 443, Vector2( 9, 1 ), 254, Vector2( 9, 2 ), 442, Vector2( 9, 3 ), 190, Vector2( 10, 2 ), 254, Vector2( 10, 3 ), 187 ]
0/autotile/icon_coordinate = Vector2( 0, 0 )
0/autotile/tile_size = Vector2( 16, 16 )
0/autotile/spacing = 0
0/autotile/occluder_map = [  ]
0/autotile/navpoly_map = [  ]
0/autotile/priority_map = [  ]
0/autotile/z_index_map = [  ]
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 4 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 4 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 5 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 6 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 7 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 8 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 9 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 10 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 11 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 12 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 13 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 14 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 15 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 16 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 17 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 18 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 19 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 20 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 21 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 22 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 23 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 24 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 25 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 26 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 27 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 28 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 29 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}

[sub_resource type="Animation" id=3]
resource_name = "walk"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4, 5, 6, 7 ]
}

[sub_resource type="Shader" id=57]
code = "shader_type canvas_item;
const float UPDATE_INTERVAL = .163;
const float STATIC_GRANULARITY = .005;
const float EDGE_BLUR = .5;
const float BORDER_SIZE = .3;

float generate_random_static (in float size, in float interval, in vec2 uv){
	float time_step = TIME - mod(TIME,interval);
	vec2 uv_step = uv - mod(uv, size);
	return fract(sin(dot(uv_step,vec2(12.0278*sin(time_step),15.0905)))*43758.5453);
}

vec2 get_polar_coords (vec2 center, vec2 uv){
	vec2 pos = uv-center;
	float r = length(pos);
	float theta = atan(pos.y,pos.x);
	return vec2(r,theta);
}

vec4 layer (in vec4 front_color, in vec4 back_color){
	return vec4(mix(back_color.rgb,front_color.rgb,front_color.a),front_color.a+back_color.a);
}

void fragment() {
	vec3 static_plot = vec3(generate_random_static(STATIC_GRANULARITY,UPDATE_INTERVAL,UV));
	
	vec2 c1 = vec2(0.5);
	vec2 pv1 = get_polar_coords(c1,UV);
	float func = BORDER_SIZE-.015*cos(4.0*pv1.y);
	float border_plot = smoothstep(func,func+EDGE_BLUR, pv1.x);
	vec4 border_color = vec4(vec3(0.0),1.0)*border_plot;
	COLOR = vec4(static_plot,.1);
	COLOR = layer(COLOR,border_color);
}"

[sub_resource type="ShaderMaterial" id=56]
render_priority = 4
shader = SubResource( 57 )

[sub_resource type="RectangleShape2D" id=31]
extents = Vector2( 5, 4 )

[sub_resource type="RectangleShape2D" id=34]
extents = Vector2( 6, 7 )

[sub_resource type="CircleShape2D" id=33]
radius = 15.0333

[sub_resource type="Animation" id=60]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -7, -26 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Label:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -3, -26 ) ]
}

[sub_resource type="Animation" id=61]
resource_name = "bob"
length = 1.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 0.9, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -7, -19 ), Vector2( -7, -22 ), Vector2( -7, -26 ), Vector2( -7, -22 ), Vector2( -7, -19 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Label:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 0.9, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -3, -23 ), Vector2( -3, -26 ), Vector2( -3, -30 ), Vector2( -3, -26 ), Vector2( -3, -23 ) ]
}

[sub_resource type="Animation" id=35]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -7, -26 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Label:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( -3, -26 ) ]
}

[sub_resource type="Animation" id=36]
resource_name = "bob"
length = 1.2
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 0.9, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -7, -19 ), Vector2( -7, -22 ), Vector2( -7, -26 ), Vector2( -7, -22 ), Vector2( -7, -19 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../Label:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.3, 0.6, 0.9, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( -3, -23 ), Vector2( -3, -26 ), Vector2( -3, -30 ), Vector2( -3, -26 ), Vector2( -3, -23 ) ]
}

[sub_resource type="Animation" id=37]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=38]
resource_name = "fade_to_black"
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ) ]
}
tracks/1/type = "method"
tracks/1/path = NodePath("..")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "_change_scene"
} ]
}

[sub_resource type="Animation" id=39]
resource_name = "fade_to_normal"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath("ColorRect:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}

[sub_resource type="ConvexPolygonShape2D" id=41]
points = PoolVector2Array( 0, 0, 16, 0, 16, 20, 0, 20 )

[sub_resource type="TileSet" id=40]
0/name = "0x72_DungeonTilesetII_v1.3.png 0"
0/texture = ExtResource( 13 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 288, 300, 16, 20 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 41 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 41 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0

[sub_resource type="RectangleShape2D" id=42]
extents = Vector2( 10, 23 )

[sub_resource type="CircleShape2D" id=43]
radius = 57.0351

[sub_resource type="AtlasTexture" id=44]
atlas = ExtResource( 15 )
region = Rect2( 0, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=45]
atlas = ExtResource( 15 )
region = Rect2( 37, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=46]
atlas = ExtResource( 15 )
region = Rect2( 74, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=47]
atlas = ExtResource( 15 )
region = Rect2( 111, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=48]
atlas = ExtResource( 15 )
region = Rect2( 148, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=49]
atlas = ExtResource( 15 )
region = Rect2( 185, 0, 37, 34 )

[sub_resource type="AtlasTexture" id=50]
atlas = ExtResource( 15 )
region = Rect2( 222, 0, 37, 34 )

[sub_resource type="SpriteFrames" id=51]
animations = [ {
"frames": [ SubResource( 44 ), SubResource( 45 ), SubResource( 46 ), SubResource( 47 ), SubResource( 48 ), SubResource( 49 ), SubResource( 50 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[sub_resource type="Shader" id=58]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=59]
shader = SubResource( 58 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.253
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = true
shader_param/roll_speed = 0.0
shader_param/roll_size = 15.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[node name="Node2D" type="Node2D"]

[node name="Tunnel Tilemap" type="TileMap" parent="."]
tile_set = SubResource( 1 )
cell_size = Vector2( 16, 16 )
format = 1
tile_data = PoolIntArray( -1179633, 0, 0, -1179632, 0, 1, -1179631, 0, 1, -1179630, 0, 2, -1114097, 0, 65536, -1114096, 0, 65537, -1114095, 0, 65537, -1114094, 0, 65538, -1048561, 0, 65536, -1048560, 0, 65537, -1048559, 0, 65537, -1048558, 0, 65538, -983025, 0, 65536, -983024, 0, 65537, -983023, 0, 65537, -983022, 0, 65538, -917489, 0, 65536, -917488, 0, 65537, -917487, 0, 65537, -917486, 0, 65538, -851953, 0, 65536, -851952, 0, 65537, -851951, 0, 65537, -851950, 0, 65538, -786417, 0, 65536, -786416, 0, 65537, -786415, 0, 65537, -786414, 0, 65538, -720881, 0, 65536, -720880, 0, 65537, -720879, 0, 65537, -720878, 0, 65538, -655345, 0, 65536, -655344, 0, 65537, -655343, 0, 65537, -655342, 0, 65538, -589809, 0, 65536, -589808, 0, 65537, -589807, 0, 65537, -589806, 0, 65538, -524273, 0, 65536, -524272, 0, 65537, -524271, 0, 65537, -524270, 0, 65538, -458737, 0, 65536, -458736, 0, 65537, -458735, 0, 65537, -458734, 0, 65538, -393201, 0, 65536, -393200, 0, 65537, -393199, 0, 65537, -393198, 0, 65538, -327665, 0, 65536, -327664, 0, 65537, -327663, 0, 65537, -327662, 0, 65538, -262129, 0, 65536, -262128, 0, 65537, -262127, 0, 65537, -262126, 0, 131077, -262125, 0, 2, -196594, 0, 0, -196593, 0, 131078, -196592, 0, 65537, -196591, 0, 65537, -196590, 0, 65537, -196589, 0, 131077, -196588, 0, 2, -131061, 0, 0, -131060, 0, 1, -131059, 0, 1, -131058, 0, 131078, -131057, 0, 65537, -131056, 0, 65537, -131055, 0, 65537, -131054, 0, 65537, -131053, 0, 65537, -131052, 0, 131077, -131051, 0, 1, -131050, 0, 2, -65525, 0, 65536, -65524, 0, 65537, -65523, 0, 65537, -65522, 0, 65537, -65521, 0, 65537, -65520, 0, 65537, -65519, 0, 65537, -65518, 0, 65537, -65517, 0, 65537, -65516, 0, 65537, -65515, 0, 65537, -65514, 0, 131077, -65513, 0, 2, 10, 0, 0, 11, 0, 131078, 12, 0, 65537, 13, 0, 65537, 14, 0, 65537, 15, 0, 65537, 16, 0, 65537, 17, 0, 65537, 18, 0, 65537, 19, 0, 65537, 20, 0, 65537, 21, 0, 65537, 22, 0, 65537, 23, 0, 131077, 24, 0, 2, 65546, 0, 65536, 65547, 0, 65537, 65548, 0, 65537, 65549, 0, 65537, 65550, 0, 65537, 65551, 0, 65537, 65552, 0, 65537, 65553, 0, 65537, 65554, 0, 65537, 65555, 0, 65537, 65556, 0, 65537, 65557, 0, 65537, 65558, 0, 65537, 65559, 0, 65537, 65560, 0, 65538, 131081, 0, 0, 131082, 0, 131080, 131083, 0, 65537, 131084, 0, 65537, 131085, 0, 65537, 131086, 0, 65537, 131087, 0, 65537, 131088, 0, 65537, 131089, 0, 65537, 131090, 0, 65537, 131091, 0, 65537, 131092, 0, 65537, 131093, 0, 65537, 131094, 0, 65537, 131095, 0, 65537, 131096, 0, 131077, 131097, 0, 2, 196616, 0, 0, 196617, 0, 131080, 196618, 0, 65537, 196619, 0, 65537, 196620, 0, 65537, 196621, 0, 65537, 196622, 0, 65537, 196623, 0, 65537, 196624, 0, 65537, 196625, 0, 65537, 196626, 0, 65537, 196627, 0, 65537, 196628, 0, 65537, 196629, 0, 65537, 196630, 0, 65537, 196631, 0, 65537, 196632, 0, 65537, 196633, 0, 131077, 196634, 0, 2, 262152, 0, 65536, 262153, 0, 65537, 262154, 0, 65537, 262155, 0, 65537, 262156, 0, 65537, 262157, 0, 65537, 262158, 0, 65537, 262159, 0, 65537, 262160, 0, 65537, 262161, 0, 65537, 262162, 0, 65537, 262163, 0, 65537, 262164, 0, 65537, 262165, 0, 65537, 262166, 0, 65537, 262167, 0, 65537, 262168, 0, 65537, 262169, 0, 65537, 262170, 0, 131077, 262171, 0, 2, 327687, 0, 0, 327688, 0, 131078, 327689, 0, 65537, 327690, 0, 65537, 327691, 0, 65537, 327692, 0, 65537, 327693, 0, 65537, 327694, 0, 65537, 327695, 0, 65537, 327696, 0, 65537, 327697, 0, 65537, 327698, 0, 65537, 327699, 0, 65537, 327700, 0, 65537, 327701, 0, 65537, 327702, 0, 65537, 327703, 0, 65537, 327704, 0, 65537, 327705, 0, 65537, 327706, 0, 65537, 327707, 0, 65538, 393223, 0, 65536, 393224, 0, 65537, 393225, 0, 65537, 393226, 0, 65537, 393227, 0, 65537, 393228, 0, 65537, 393229, 0, 65537, 393230, 0, 65537, 393231, 0, 65537, 393232, 0, 65537, 393233, 0, 65537, 393234, 0, 65537, 393235, 0, 65537, 393236, 0, 65537, 393237, 0, 65537, 393238, 0, 65537, 393239, 0, 65537, 393240, 0, 65537, 393241, 0, 65537, 393242, 0, 65537, 393243, 0, 65538, 458759, 0, 65536, 458760, 0, 65537, 458761, 0, 65537, 458762, 0, 65537, 458763, 0, 65537, 458764, 0, 65537, 458765, 0, 65537, 458766, 0, 65537, 458767, 0, 65537, 458768, 0, 65537, 458769, 0, 65537, 458770, 0, 65537, 458771, 0, 65537, 458772, 0, 65537, 458773, 0, 65537, 458774, 0, 65537, 458775, 0, 65537, 458776, 0, 65537, 458777, 0, 65537, 458778, 0, 65537, 458779, 0, 65538, 524295, 0, 65536, 524296, 0, 65537, 524297, 0, 65537, 524298, 0, 65537, 524299, 0, 65537, 524300, 0, 65537, 524301, 0, 65537, 524302, 0, 65537, 524303, 0, 65537, 524304, 0, 65537, 524305, 0, 65537, 524306, 0, 65537, 524307, 0, 65537, 524308, 0, 65537, 524309, 0, 65537, 524310, 0, 65537, 524311, 0, 65537, 524312, 0, 65537, 524313, 0, 65537, 524314, 0, 65537, 524315, 0, 65538, 589831, 0, 65536, 589832, 0, 65537, 589833, 0, 65537, 589834, 0, 65537, 589835, 0, 65537, 589836, 0, 65537, 589837, 0, 65537, 589838, 0, 65537, 589839, 0, 65537, 589840, 0, 65537, 589841, 0, 65537, 589842, 0, 65537, 589843, 0, 65537, 589844, 0, 65537, 589845, 0, 65537, 589846, 0, 65537, 589847, 0, 65537, 589848, 0, 65537, 589849, 0, 65537, 589850, 0, 65537, 589851, 0, 65538, 655367, 0, 65536, 655368, 0, 65537, 655369, 0, 65537, 655370, 0, 65537, 655371, 0, 65537, 655372, 0, 65537, 655373, 0, 65537, 655374, 0, 65537, 655375, 0, 65537, 655376, 0, 65537, 655377, 0, 65537, 655378, 0, 65537, 655379, 0, 65537, 655380, 0, 65537, 655381, 0, 65537, 655382, 0, 65537, 655383, 0, 65537, 655384, 0, 65537, 655385, 0, 65537, 655386, 0, 65537, 655387, 0, 65538, 720903, 0, 65536, 720904, 0, 65537, 720905, 0, 65537, 720906, 0, 65537, 720907, 0, 65537, 720908, 0, 65537, 720909, 0, 65537, 720910, 0, 65537, 720911, 0, 65537, 720912, 0, 65537, 720913, 0, 65537, 720914, 0, 65537, 720915, 0, 65537, 720916, 0, 65537, 720917, 0, 65537, 720918, 0, 65537, 720919, 0, 65537, 720920, 0, 65537, 720921, 0, 65537, 720922, 0, 65537, 720923, 0, 65538, 786439, 0, 65536, 786440, 0, 65537, 786441, 0, 65537, 786442, 0, 65537, 786443, 0, 65537, 786444, 0, 65537, 786445, 0, 65537, 786446, 0, 65537, 786447, 0, 65537, 786448, 0, 65537, 786449, 0, 65537, 786450, 0, 65537, 786451, 0, 65537, 786452, 0, 65537, 786453, 0, 65537, 786454, 0, 65537, 786455, 0, 65537, 786456, 0, 65537, 786457, 0, 65537, 786458, 0, 65537, 786459, 0, 65538, 851975, 0, 131072, 851976, 0, 65542, 851977, 0, 65537, 851978, 0, 65537, 851979, 0, 65537, 851980, 0, 65537, 851981, 0, 65537, 851982, 0, 65537, 851983, 0, 65537, 851984, 0, 65537, 851985, 0, 65537, 851986, 0, 65537, 851987, 0, 65537, 851988, 0, 65537, 851989, 0, 65537, 851990, 0, 65537, 851991, 0, 65537, 851992, 0, 65537, 851993, 0, 65537, 851994, 0, 65541, 851995, 0, 131074, 917512, 0, 65536, 917513, 0, 65537, 917514, 0, 65537, 917515, 0, 65537, 917516, 0, 65537, 917517, 0, 65537, 917518, 0, 65537, 917519, 0, 65537, 917520, 0, 65537, 917521, 0, 65537, 917522, 0, 65537, 917523, 0, 65537, 917524, 0, 65537, 917525, 0, 65537, 917526, 0, 65537, 917527, 0, 65537, 917528, 0, 65537, 917529, 0, 65541, 917530, 0, 131074, 917535, 0, 0, 917536, 0, 2, 983048, 0, 131072, 983049, 0, 131073, 983050, 0, 65542, 983051, 0, 65537, 983052, 0, 65537, 983053, 0, 65537, 983054, 0, 65537, 983055, 0, 65537, 983056, 0, 65537, 983057, 0, 65537, 983058, 0, 65537, 983059, 0, 65537, 983060, 0, 65537, 983061, 0, 65537, 983062, 0, 65537, 983063, 0, 65537, 983064, 0, 65541, 983065, 0, 131074, 983071, 0, 131072, 983072, 0, 131074, 1048586, 0, 131072, 1048587, 0, 131073, 1048588, 0, 131073, 1048589, 0, 65542, 1048590, 0, 65537, 1048591, 0, 65537, 1048592, 0, 65537, 1048593, 0, 65537, 1048594, 0, 65537, 1048595, 0, 65537, 1048596, 0, 65541, 1048597, 0, 131073, 1048598, 0, 131073, 1048599, 0, 65544, 1048600, 0, 131074, 1114125, 0, 131072, 1114126, 0, 65542, 1114127, 0, 65537, 1114128, 0, 65537, 1114129, 0, 65537, 1114130, 0, 65541, 1114131, 0, 131073, 1114132, 0, 131074, 1114135, 0, 131075, 1179662, 0, 131072, 1179663, 0, 131073, 1179664, 0, 131073, 1179665, 0, 131073, 1179666, 0, 131074 )

[node name="Grass" parent="." instance=ExtResource( 4 )]
tile_data = PoolIntArray( 1638414, 4, 1, 1900607, 1, 720896 )

[node name="YSort" type="YSort" parent="."]
position = Vector2( 217, 193 )

[node name="CaveDoor" parent="YSort" instance=ExtResource( 9 )]
position = Vector2( 54, -226 )
scale = Vector2( 0.971264, 1.01256 )
z_index = 1

[node name="Player" parent="YSort" instance=ExtResource( 3 )]
position = Vector2( 47, 93 )
z_index = 1

[node name="AnimatedSprite" parent="YSort/Player/Torch" index="1"]
frame = 4

[node name="AnimationPlayer" parent="YSort/Player" index="4"]
anims/RESET = SubResource( 2 )
anims/walk = SubResource( 3 )

[node name="Inventory" parent="YSort/Player/UserInterface" index="0"]
position = Vector2( 148, 184 )

[node name="Exclamation" parent="YSort/Player/UserInterface/JournalIcon" index="1"]
frame = 4

[node name="vhs" type="Sprite" parent="YSort/Player/UserInterface" index="3"]
material = SubResource( 56 )
position = Vector2( 362, 237 )
scale = Vector2( 11.2813, 7.59375 )
texture = ExtResource( 18 )

[node name="PressurePlate" type="Area2D" parent="YSort"]
position = Vector2( -82, -46 )
collision_layer = 24
collision_mask = 18
monitorable = false
script = ExtResource( 8 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="YSort/PressurePlate"]
position = Vector2( 90, -155 )
shape = SubResource( 31 )

[node name="Sprite" type="Sprite" parent="YSort/PressurePlate"]
position = Vector2( 90, -156 )
texture = ExtResource( 7 )
hframes = 4

[node name="MovableBox" type="KinematicBody2D" parent="YSort"]
position = Vector2( -56, 14 )
z_index = 1
collision_layer = 16
collision_mask = 27
script = ExtResource( 12 )
push_strength = 12
path_to_player = NodePath("../Player")

[node name="CollisionShape2D" type="CollisionShape2D" parent="YSort/MovableBox"]
position = Vector2( 0, 8 )
shape = SubResource( 34 )

[node name="Sprite" type="Sprite" parent="YSort/MovableBox"]
texture = ExtResource( 2 )

[node name="Down" type="RayCast2D" parent="YSort/MovableBox"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 0, 5 )
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Right" type="RayCast2D" parent="YSort/MovableBox"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 3, 5 )
rotation = -1.5708
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Up" type="RayCast2D" parent="YSort/MovableBox"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 0, 5 )
rotation = -3.14159
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Left" type="RayCast2D" parent="YSort/MovableBox"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( -3, 5 )
rotation = 1.5708
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="InteractKey" parent="YSort/MovableBox" instance=ExtResource( 11 )]
text = "Push"

[node name="CollisionShape2D" parent="YSort/MovableBox/InteractKey" index="0"]
position = Vector2( 0, 3 )
shape = SubResource( 33 )

[node name="Tween" type="Tween" parent="YSort/MovableBox"]

[node name="MovableBox2" type="KinematicBody2D" parent="YSort"]
position = Vector2( 164, 19 )
z_index = 1
collision_layer = 16
collision_mask = 27
script = ExtResource( 12 )
push_strength = 12
path_to_player = NodePath("../Player")

[node name="CollisionShape2D" type="CollisionShape2D" parent="YSort/MovableBox2"]
position = Vector2( 0, 8 )
shape = SubResource( 34 )

[node name="Sprite" type="Sprite" parent="YSort/MovableBox2"]
texture = ExtResource( 2 )

[node name="Down" type="RayCast2D" parent="YSort/MovableBox2"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 0, 5 )
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Right" type="RayCast2D" parent="YSort/MovableBox2"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 3, 5 )
rotation = -1.5708
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Up" type="RayCast2D" parent="YSort/MovableBox2"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( 0, 5 )
rotation = -3.14159
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="Left" type="RayCast2D" parent="YSort/MovableBox2"]
modulate = Color( 0.431373, 0.4, 0.4, 1 )
position = Vector2( -3, 5 )
rotation = 1.5708
scale = Vector2( 5, 0.5 )
enabled = true
collision_mask = 2
collide_with_areas = true

[node name="InteractKey" parent="YSort/MovableBox2" instance=ExtResource( 11 )]
text = "Push"

[node name="CollisionShape2D" parent="YSort/MovableBox2/InteractKey" index="0"]
position = Vector2( 0, 3 )
shape = SubResource( 33 )

[node name="AnimationPlayer" parent="YSort/MovableBox2/InteractKey" index="3"]
anims/RESET = SubResource( 60 )
anims/bob = SubResource( 61 )

[node name="Tween" type="Tween" parent="YSort/MovableBox2"]

[node name="Bailes Tilemap" parent="YSort" instance=ExtResource( 5 )]
position = Vector2( -217, -193 )
cell_size = Vector2( 16, 16 )
tile_data = PoolIntArray( -196592, 1, 0, 19, 2, 0, 65550, 2, 0, 131083, 2, 0, 131094, 7, 0, 327705, 2, 0, 524304, 14, 0, 524306, 5, 0, 524315, 11, 0, 589839, 4, 0, 589847, 9, 0, 720897, 12, 0, 786458, 3, 0, 1114119, 11, 0 )

[node name="Door" parent="." instance=ExtResource( 10 )]
position = Vector2( 263, 306 )
next_scene = "res://Scenes/Maps/WorldMap.tscn"

[node name="DoorMuseum1" parent="Door" index="0"]
visible = false

[node name="InteractKey" parent="Door" index="1"]
text = "Exit"

[node name="AnimationPlayer" parent="Door/InteractKey" index="3"]
anims/RESET = SubResource( 35 )
anims/bob = SubResource( 36 )

[node name="ColorRect" parent="Door/CanvasLayer" index="0"]
visible = false
margin_left = -36.0
margin_top = 23.0
margin_right = 603.0
margin_bottom = 383.0

[node name="AnimationPlayer" parent="Door/CanvasLayer" index="1"]
anims/RESET = SubResource( 37 )
anims/fade_to_black = SubResource( 38 )
anims/fade_to_normal = SubResource( 39 )

[node name="Box" type="TileMap" parent="."]
tile_set = SubResource( 40 )
cell_size = Vector2( 16, 16 )
format = 1
tile_data = PoolIntArray( -262129, 0, 0, -262126, 0, 0, -196593, 0, 0, -196590, 0, 0, -131057, 0, 0, -131054, 0, 0, 65554, 0, 0, 65558, 0, 0, 131088, 0, 0, 196623, 0, 0, 196629, 0, 0, 262156, 0, 0, 327698, 0, 0, 327701, 0, 0, 327702, 0, 0, 327704, 0, 0, 393225, 0, 0, 393227, 0, 0, 393230, 0, 0, 393233, 0, 0, 458771, 0, 0, 458773, 0, 0, 458774, 0, 0, 458776, 0, 0, 458777, 0, 0, 458778, 0, 0, 524297, 0, 0, 524298, 0, 0, 524299, 0, 0, 524300, 0, 0, 524302, 0, 0, 524303, 0, 0, 589846, 0, 0, 655371, 0, 0, 720915, 0, 0, 720917, 0, 0, 720918, 0, 0, 720920, 0, 0, 720921, 0, 0, 851980, 0, 0, 851981, 0, 0, 851986, 0, 0, 851987, 0, 0, 917519, 0, 0, 917526, 0, 0, 983054, 0, 0, 983058, 0, 0 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( 271, 164 )
shape = SubResource( 42 )

[node name="Cutscene" parent="." instance=ExtResource( 14 )]
position = Vector2( 266, -268 )
path_to_player = NodePath("../YSort/Player")
return_camera_after_dialogue = true
camera_used = "scene_camera"

[node name="CutsceneTrigger" parent="Cutscene" index="0"]
position = Vector2( 7, 111 )

[node name="CollisionShape2D" parent="Cutscene/CutsceneTrigger" index="0"]
position = Vector2( -2, -30 )
shape = SubResource( 43 )

[node name="Dialogue" parent="Cutscene" instance=ExtResource( 16 )]
dialogue_file = "res://Dialogue/Json/monologue_exit.json"
path_to_player = NodePath("../../YSort/Player")

[node name="Camera2D" type="Camera2D" parent="Cutscene"]
position = Vector2( 6, -9 )
zoom = Vector2( 0.65, 0.65 )

[node name="Door2" parent="." instance=ExtResource( 10 )]
position = Vector2( 271, -277 )
next_scene = "res://Scenes/Maps/Museum.tscn"
last_portal = true

[node name="DoorMuseum1" parent="Door2" index="0"]
visible = false
texture = ExtResource( 17 )

[node name="ColorRect" parent="Door2/CanvasLayer" index="0"]
margin_left = 1.0
margin_right = 640.0

[node name="Doorportal" type="AnimatedSprite" parent="Door2"]
frames = SubResource( 51 )
frame = 1
playing = true

[node name="Cutscene2" parent="." instance=ExtResource( 14 )]
position = Vector2( 188, -132 )
path_to_player = NodePath("../YSort/Player")
return_camera_after_dialogue = true
camera_used = "player_camera"

[node name="CutsceneTrigger" parent="Cutscene2" index="0"]
position = Vector2( 7, 111 )

[node name="CollisionShape2D" parent="Cutscene2/CutsceneTrigger" index="0"]
position = Vector2( -2, -30 )
shape = SubResource( 43 )

[node name="Dialogue" parent="Cutscene2" instance=ExtResource( 16 )]
dialogue_file = "res://Dialogue/Json/cave_pressureplate.json"
path_to_player = NodePath("../../YSort/Player")

[node name="CanvasModulate" type="CanvasModulate" parent="."]
position = Vector2( -2504, 24 )
color = Color( 0.172549, 0.262745, 0.172549, 1 )

[node name="Icon" type="Sprite" parent="."]
visible = false
material = SubResource( 59 )
position = Vector2( 319.5, 175.5 )
scale = Vector2( 10.1406, 5.60938 )
texture = ExtResource( 18 )

[connection signal="area_exited" from="YSort/PressurePlate" to="YSort/PressurePlate" method="_on_PressurePlate_area_exited"]
[connection signal="body_entered" from="YSort/PressurePlate" to="YSort/CaveDoor" method="_on_PressurePlate_body_entered"]
[connection signal="body_entered" from="YSort/PressurePlate" to="YSort/PressurePlate" method="_on_PressurePlate_body_entered"]
[connection signal="body_exited" from="YSort/PressurePlate" to="YSort/CaveDoor" method="_on_PressurePlate_body_exited"]
[connection signal="body_exited" from="YSort/PressurePlate" to="YSort/PressurePlate" method="_on_PressurePlate_body_exited"]
[connection signal="dialogue_finish" from="Cutscene/Dialogue" to="Cutscene" method="_on_Dialogue_dialogue_finish"]
[connection signal="dialogue_finish" from="Cutscene2/Dialogue" to="Cutscene2" method="_on_Dialogue_dialogue_finish"]

[editable path="YSort/Player"]
[editable path="YSort/Player/Interaction"]
[editable path="YSort/Player/UserInterface"]
[editable path="YSort/Player/Hurtbox"]
[editable path="YSort/MovableBox/InteractKey"]
[editable path="YSort/MovableBox2/InteractKey"]
[editable path="Door"]
[editable path="Door/InteractKey"]
[editable path="Cutscene"]
[editable path="Cutscene/CutsceneTrigger"]
[editable path="Door2"]
[editable path="Door2/InteractKey"]
[editable path="Cutscene2"]
[editable path="Cutscene2/CutsceneTrigger"]
